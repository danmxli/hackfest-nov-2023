def mockdata():
    # example chat responses
    raw_text = "Those are the following instructions to bike to Niagara Falls with moderate biking experience: \n\n1. Check the weather conditions for the day you plan to bike and the days after to ensure you have good weather for the trip and possible delays. It is about a two-day trip, so ensure you have checked the weather for both days. Ensure you also check for any updates on wind speeds and rain as these can affect your safety. \n2. Plan your route: Consider the distance and terrain between your starting point and Niagara Falls. You can use a map or a navigation app to find a suitable route that suits your skill level. Look for routes that have bike paths or dedicated lanes, and avoid any busy highways or roads with heavy traffic.\n3. Pack the essentials: Make sure you have all the necessary equipment and supplies for your journey. This includes a working bicycle in good condition, a helmet to ensure safety, a repair kit in case of any flat tires, bike tools, a spare tube, water, snacks, and a first-aid kit. It is also wise to pack accordingly to the weather. If it is during the summer months ensure you have sunscreen and if it is during the winter months ensure you have warm clothing. \n4. Consider stopping points: Along your journey, plan where you will stop to rest and refuel. Ensure you are staying hydrated and eating properly throughout the trip. Consider how far you can reasonably travel in a day based on your fitness level and energy. You can use a mapping app to find restaurants, parks, or other public areas where you can take a break.\n5. Stay on designated trails and bike paths: For your safety and convenience, stick to designated trails and bike paths as much as possible. These routes are typically safer and more suited for biking than busy roads. They will also take you through scenic routes where you can enjoy the nature surrounding the falls. \n\nRemember to stay alert and aware of your surroundings at all times during your journey. Keep an eye out for potential hazards and follow all traffic laws and regulations. \n\nWith these instructions, you should be well-prepared to bike to Niagara Falls with your moderate biking experience. Would you like me to go through more information regarding your bike trip to Niagara Falls?"

    raw_resources = [
        {'id': 'web-search_13: 2', 'snippet': ' Since Node.js technology is revolutionizing the server for the front-end developers, in this article I will be demonstrating the process of Building REST API with Node.js from scratch.\n\nBelow are the topics that I will be covering in this article:\n\nPractical Demonstration: Building a REST API with Node.js\n\nREST or RESTful stands for REpresentational State Transfer. It is an architectural style as well as an approach for communications purposes that is often used in various web services development. In simpler terms, it is an application program interface (API) that makes use of the HTTP requests to GET, PUT, POST and DELETE the data over WWW.', 'title': 'How to Build REST API with Node.js from Scratch | Edureka', 'url': 'https: //www.edureka.co/blog/rest-api-with-node-js/'}, {'id': 'web-search_12:4', 'snippet': '\n\nAnatomy of a REST API\n\nREST APIs are used to access and manipulate data using a common set of stateless operations. These operations are integral to the HTTP protocol and represent essential create, read, update, and delete (CRUD) functionality, although not in a clean one-to-one manner:\n\nPOST (create a resource or generally provide data)\n\nGET (retrieve an index of resources or an individual resource)\n\nPUT (create or replace a resource)\n\nPATCH (update/modify a resource)\n\nDELETE (remove a resource)\n\nUsing these HTTP operations and a resource name as an address, we can build a Node.js REST API by creating an endpoint for each operation.', 'title': 'Creating a Secure Node.js REST API | Toptal®', 'url': 'https://www.toptal.com/nodejs/secure-rest-api-in-nodejs'}, {'id': 'web-search_13:4', 'snippet': ' This approach provides more flexibility but requires a lot of effort to be built from the very scratch.\n\nThe main functions used in any REST-based architecture are:\n\nGET − Provides read-only access to a resource.\n\nPUT − Creates a new resource.\n\nDELETE − Removes a resource.\n\nPOST − Updates an existing resource or creates a new resource.\n\nBut all who claims cannot be referred to as RESTful API. In order to be regarded as a RESTful API, your application must satisfy certain constraints or principles. In the next section of this article on Building a REST API using Node.js, I will be talking about these principles in detail.', 'title': 'How to Build REST API with Node.js from Scratch | Edureka', 'url': 'https://www.edureka.co/blog/rest-api-with-node-js/'}, {'id': 'web-search_18:0', 'snippet': "Building a REST API with Node and Express\n\nREST APIs are an industry-standard way for web services to send and receive data. They use HTTP request methods to facilitate the request-response cycle and typically transfer data using JSON, and more rarely - HTML, XML and other formats.\n\nIn this guide, we are going to build a REST API to manage books with Node.js and Express.\n\nFor the sake of simplicity, we won't be using a database, so you don't need experience using one. We will use a simple JavaScript array to store our data instead.\n\nREST (Representational State Transfer) is a standard architecture for building and communicating with web services.", 'title': 'Building a REST API with Node and Express', 'url': 'https://stackabuse.com/building-a-rest-api-with-node-and-express/'}, {'id': 'web-search_13:10', 'snippet': ' Also, with nodemon on the watch, you don’t have to restart the Node.js server each time any changes are made. nodemon will implicitly detect the changes and restart the server for you.\n\n{ "name": "samplerestapi", "version": "1.0.0", "description": "Edureka REST API with Node.js", "main": "script.js", "scripts": { "test": "echo "Error: no test specified" &amp;&amp; exit 1" }, "author": "Edureka", "license": "ISC", "dependencies": { "express": "^4.16.4", "joi": "^13.1.0" } }\n\nconst express = require(\'express\'); const Joi = require(\'joi\'); //used for validation const app = express(); app.use(express.json()); const books = [ {title: \'Harry Potter\', id: 1}, {title: \'Twilight\', id: 2}, {title: \'Lorien Legacies\', id: 3} ] //READ Request Handlers app.get(\'/\', (req, res) => { res.send(\'Welcome to Edurekas REST API with Node.js Tutorial!!\'); }); app.get(\'/api/books\', (req,res)=> { res.send(books); }); app.get(\'/api/books/:id\', (req, res) => { const book = books.find(c => c.id === parseInt(req.params.id)); if (!book) res.status(404).send(\'<h2 style="font-family: Malgun Gothic; color: darkred;">Ooops... Cant find what you are looking for!</h2>\'); res.send(book); }); //CREATE Request Handler app.post(\'/api/books\', (req, res)=> { const { error } = validateBook(req.body); if (error){ res.status(400).send(error.details[0].message) return; } const book = { id: books.length + 1, title: req.body.title }; books.push(book); res.send(book); }); //UPDATE Request Handler app.put(\'/api/books/:id\', (req, res) => { const book = books.find(c=> c.id === parseInt(req.params.id)); if (!book) res.status(404).send(\'<h2 style="font-family: Malgun Gothic; color: darkred;">Not Found!!', 'title': 'How to Build REST API with Node.js from Scratch | Edureka', 'url': 'https://www.edureka.co/blog/rest-api-with-node-js/'}, {'id': 'web-search_3:3', 'snippet': ' This is the workshop where we’re going to take a deep dive and talk about properly testing components, declarative programming, higher-order components, performance and optimizations, immutability, working with APIs, async Redux, and production deployment.\n\nBeing a productive React developer means that you need to learn about the Node.js runtime itself. Not just how to use npm packages. You want to learn things like the event-loop, event emitters, streams, child processes, clusters, and many other built-in things that come with Node. This is why workshop #4 is dedicated to just Node.js, from A to Z; Node.js Beyond the Basics. Here’s an article I wrote to challenge your knowledge of the Node.js runtime.', 'title': 'Learn full-stack JavaScript with Node.js and React.js in 1 week', 'url': 'https://www.linkedin.com/pulse/learn-full-stack-javascript-nodejs-reactjs-1-week-samer-buna'}]
    
    chat_response = "Based on your main task, here is one subtask to consider:\n\nResearch and analyze the weather conditions for the destination you plan to bike through during your trip. Look for any upcoming changes or fluctuations in weather patterns that could potentially impact your safety and the overall feasibility of the journey. Check sources like weather websites or apps that provide accurate and detailed information about precipitation, temperature changes, and any severe weather alerts in the area. Ensure you make note of these details to help prepare for the trip. \n\nWould you like me to generate another subtask?"

    return({
        "raw_text": raw_text,
        "raw_resources": raw_resources,
        "chat_response": chat_response 
    })
